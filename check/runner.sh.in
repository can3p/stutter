#!@BASH@
#
# Run input through stutter and compare with a pre-created output file.
#
# Usage:
#   bash runner.sh -f ../src/repl/stu -l ../src/stdlib.stu 001_curried.input
#
# Returns 0 on success; 1 on failure.
#

VALGRIND="@VALGRIND@"
BASENAME="@BASENAME@"
DIFF="@DIFF@"
INPUT_SUFFIX=".input"
OUTPUT_SUFFIX=".output"
STULIB="-l ../src/stdlib.stu"
STU="../src/repl/stu"
RUNNER=

# Run tests through valgrind if it exists.
if [ "x$VALGRIND" != "x" ]; then
    RUNNER="$VALGRIND -q --trace-children=yes --track-origins=yes --leak-check=full --error-exitcode=1 --tool=memcheck"
fi

while getopts "f:l:" opt; do
    case $opt in
        f)
            STU=$OPTARG
            ;;
        l)
            STULIB="$STULIB -l $OPTARG"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
  esac
done

tmp=$(mktemp)
errtmp=$(mktemp)

shift $((OPTIND - 1))
TEST=$($BASENAME "$1" $INPUT_SUFFIX)
FAILED=0

$RUNNER $STU $STULIB -f $TEST$INPUT_SUFFIX >$tmp 2>$errtmp
if [ "x$?" != "x0" ]; then
    echo "[ FAILED ]"
    echo "--"
    echo -e "Command: $RUNNER $STU $STULIB -f $TEST$INPUT_SUFFIX"
    echo "Valgrind errors:"
    cat $errtmp
    echo "--"
    FAILED=1
else
    out=$($DIFF -u $tmp $TEST$OUTPUT_SUFFIX)
    if [ "x$?" != "x0" ]; then
        echo "[ FAILED ]"
        echo -e "Command: $RUNNER $STU $STULIB -f $TEST$INPUT_SUFFIX"
        echo -e "$out"
        let "FAILED++"
    fi
fi
rm -f $tmp $errtmp

exit $FAILED
