;;
;; Stdlib functions and definitions. Note that lambda or λ
;; can be used for lambda syntax.
;;

(defmacro defun  (name args & rest)
  `(def ,name (λ ,args ,@rest)))

(defmacro when (cond form)
  (list 'if cond form nil))

;; Boolean negation.
(defun not (a) (if a #f #t))

;; nil predicate.
(defun nil? (a) (= a nil))

;; Fold right.
(defun foldr (f end lst)
             (if (nil? lst)
                 end
               (f (car lst) (foldr f end (cdr lst)))))
(def reduce foldr)

;; Fold left.
(defun foldl (f acc lst)
             (if (nil? lst)
                 acc
               (foldl f (f (car lst) acc) (cdr lst))))
(def fold foldl)

;; Length of a list.
(defun length (lst)
              (fold (λ (a b) (+ 1 b)) 0 lst))

;; Standard map.
(defun map (f lst)
           (reduce (λ (a b) (cons (f a) b)) nil lst))

;; Perl-style grep.
(defun grep (p lst)
            (reduce (λ (a b)
                     (if (p a) (cons a b) b)) nil lst))
(def filter grep)

;; Max & min
(defun max (a b) (if (> a b) a b))
(defun min (a b) (if (< a b) a b))

;; List max & min.
(def list-max (fold max 0))
(defun list-min (lst)
                (fold min (car lst) lst))

;; The various list accessors.
(defun cadr (a) (car (cdr a)))
(defun caddr (a) (car (cdr (cdr a))))
(defun cadddr (a) (car (cdr (cdr (cdr a)))))
(defun caddddr (a) (car (cdr (cdr (cdr (cdr a))))))

(defun abs (a) (if (< a 0) (- a) a))
